#include<opencv2\imgproc\imgproc.hpp>
#include<opencv2\highgui\highgui.hpp>
#include<iostream>

using namespace std;
using namespace cv;

Point point1 = Point(0, 0);
Point point2 = Point(0, 0);

void closing(Mat i, Mat k)
{
	dilate(i, i, k);
	erode(i, i, k);

}

void multiErode(Mat img, Mat k, int n)
{
	for (int i = 0; i < n; i++)
	{
		erode(img, img, k);
	}
}

void multiDilate(Mat img, Mat k, int n)
{
	for (int i = 0; i < n; i++)
	{
		dilate(img, img, k);
	}
}

void getFetusImage(Mat image, Point p)
{
	floodFill(image, p, Scalar(125));
	for (int i = 0; i < image.rows; i++)
	{
		for (int j = 0; j < image.cols; j++)
		{
			if (image.at<uchar>(Point(j, i)) != 125) image.at<uchar>(Point(j, i)) = 0;;
		}
	}

}

void getLinePoint(Mat image)
{
	vector<Point> dots;

	for (int i = 0; i < image.rows; i++)
	{
		for (int j = 0; j < image.cols; j++)
		{

			if (image.at<uchar>(Point(j, i)) == 125)
			{
				dots.push_back(Point(j, i));
			}
		}
	}
	double maxDist = 0;
	for (int i = 0; i < dots.size(); i++)
	{
		for (int j = i + 1; j < dots.size(); j++)
		{
			if (maxDist < norm(dots.at(i) - dots.at(j)))
			{
				maxDist = norm(dots.at(i) - dots.at(j));
				point1 = dots.at(i);
				point2 = dots.at(j);
			}
		}
	}
}

void getEdge(Mat image, Mat k)
{
	Mat temp = image.clone();
	erode(temp, temp, k);
	subtract(image, temp, image);
}

double getLength(double val)
{
	return val * 25.4 / 96;
}

double tableGA(double l, int m)
{
	double k = roundf(l * 10) / 10;
	int idx = k * 10 - 10;
	double age[3][57] =
	{
		// Mac Gregor table
		{ 7.5, 7.6, 8.0, 8.1, 8.1, 8.2, 8.3, 8.4, 8.5, 8.5,
		8.6, 9.0, 9.1, 9.1, 9.2, 9.3, 9.4, 9.4, 9.5, 9.6,
		9.6, 10.0, 10.1, 10.2, 10.2, 10.3, 10.4, 10.4, 10.5, 10.6,
		10.6, 11.0, 11.1, 11.1, 11.2, 11.3, 11.3, 11.4, 11.5, 11.5,
		11.6, 12.0, 12.0, 12.1, 12.1, 12.2, 12.3, 12.3, 12.4, 12.4,
		12.5, 12.6, 12.6, 13.0, 13.0, 13.1, 13.2
		},

		// Robinson and Fleming table
		{ 7.0, 7.1, 7.3, 7.4, 7.5, 7.6, 8.0, 8.1, 8.2, 8.3,
		8.4, 8.5, 8.6, 8.6, 9.0, 9.1, 9.2, 9.3, 9.3, 9.4,
		9.5, 9.6, 9.6, 10.0, 10.1, 10.1, 10.2, 10.3, 10.3, 10.4,
		10.5, 10.5, 10.6, 11.0, 11.0, 11.1, 11.1, 11.2, 11.3, 11.3,
		11.4, 11.4, 11.5, 11.5, 11.6, 11.6, 12.0, 12.1, 12.1, 12.2,
		12.2, 12.3, 12.3, 12.4, 12.4, 12.5, 12.5
		},

		//Drumm table
		{ 6.6, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 8.0, 8.1, 8.2,
		8.3, 8.4, 8.5, 8.6, 9.0, 9.1, 9.2, 9.3, 9.3, 9.4,
		9.5, 9.6, 10.0, 10.0, 10.1, 10.2, 10.3, 10.3, 10.4, 10.5,
		10.5, 10.6, 11.0, 11.0, 11.1, 11.2, 11.2, 11.3, 11.4, 11.4,
		11.5, 11.5, 11.6, 12.0, 12.0, 12.1, 12.2, 12.2, 12.3, 12.3,
		12.4, 12.5, 125, 12.6, 12.6, 13.0, 13.0
		}
	};

	return age[m][idx];
}

int fetalWeight(int ga)
{
	switch (ga)
	{
	case 7:
		return 1;
		break;
	case 8:
		return 1;
		break;
	case 9:
		return 2;
		break;
	case 10:
		return 4;
		break;
	case 11:
		return 7;
		break;
	case 12:
		return 14;
		break;
	case 13:
		return 23;
		break;

	}
}

int main(int argc, char* argv)
{
	IplImage* image_src = cvLoadImage("cs8w.jpg", CV_LOAD_IMAGE_UNCHANGED);
	Mat image = imread("cs8w.jpg", CV_LOAD_IMAGE_GRAYSCALE);
	Mat kernel = getStructuringElement(MORPH_RECT, Size(3, 3));
	int iterate = 2;
	closing(image, kernel);
	multiErode(image, kernel, iterate);
	medianBlur(image, image, 11);
	multiDilate(image, kernel, iterate);
	threshold(image, image, 50, 255, THRESH_TRIANGLE);
	getFetusImage(image, Point(170, 170));
	getEdge(image, kernel);
	getLinePoint(image);
	cvLine(image_src, point1, point2, Scalar(0, 255, 0), 4, 8);
	namedWindow("RESULT IMAGE", WINDOW_AUTOSIZE);
	cvShowImage("RESULT IMAGE", image_src);
	double dist = norm(point1 - point2);
	double length = getLength(sqrt(dist));
	int ga_mac = tableGA(length, 0) * 10;
	int ga_rf = tableGA(length, 1) * 10;
	int ga_dr = tableGA(length, 2) * 10;
	cout << "Length of fetus : " << roundf(length * 100) / 100 << " cm." << endl;
	cout << "Gestational age (MacGregor table): " << ga_mac / 10 << " week(s) " << ga_mac % 10 << " day(s)." << endl;
	cout << "Fetal weight : " << fetalWeight(ga_mac / 10) << " grams." << endl;
	cout << "Gestational age (Robinson and Fleming table): " << ga_rf / 10 << " week(s) " << ga_rf % 10 << " day(s)." << endl;
	cout << "Fetal weight : " << fetalWeight(ga_rf / 10) << " grams." << endl;
	cout << "Gestational age (Drumm table): " << ga_dr / 10 << " week(s) " << ga_dr % 10 << " day(s)." << endl;
	cout << "Fetal weight : " << fetalWeight(ga_dr / 10) << " grams." << endl;
	waitKey(0);
	image.release();
	kernel.release();
	cvReleaseImage(&image_src);
	cvDestroyWindow("result");
	return 0;
}
