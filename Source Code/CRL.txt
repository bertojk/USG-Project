#include<opencv2\imgproc\imgproc.hpp>
#include<opencv2\highgui\highgui.hpp>
#include<iostream>

using namespace std;
using namespace cv;

int x_1 = 0;
int x_2 = 0;
int y_1 = 0;
int y_2 = 0;

void closing(Mat i, Mat k)
{
	dilate(i, i, k);
	erode(i, i, k);

}

void multiErode(Mat img, Mat k, int n)
{
	for (int i = 0; i < n; i++)
	{
		erode(img, img, k);
	}
}

void multiDilate(Mat img, Mat k, int n)
{
	for (int i = 0; i < n; i++)
	{
		dilate(img, img, k);
	}
}

void getFetusImage(Mat image, Point p)
{
	floodFill(image, p, Scalar(125));
	for (int i = 0; i < image.rows; i++)
	{
		for (int j = 0; j < image.cols; j++)
		{
			if (image.at<uchar>(Point(j, i)) != 125) image.at<uchar>(Point(j, i)) = 0;;
		}
	}

}

void getLinePoint(Mat image)
{
	double d = 0;
	double d_max = 0;
	int dx = 0;
	int dy = 0;
	for (int i = 0; i < image.rows; i++)
	{
		for (int j = 0; j < image.cols; j++)
		{
			for (int k = 0; k < image.rows; k++)
			{
				for (int l = 0; l < image.cols; l++)
				{
					if (i*image.rows + j > k*image.rows + l)
					{
						if (image.at<uchar>(Point(j, i)) == 125 && image.at<uchar>(Point(l, k)) == 125)
						{
							dx = abs(j - l);
							dy = abs(i - k);
							d = sqrt(dx*dx + dy*dy);
							if (d > d_max)
							{
								d_max = d;
								x_1 = l;
								y_1 = k;
								x_2 = j;
								y_2 = i;
							}
						}
					}
				}
			}
		}
	}
}

double getLength(double val)
{
	return val * 2.54 / 96;
}


int main(int argc, char* argv)
{
	IplImage* image_src = cvLoadImage("cs8w.jpg", CV_LOAD_IMAGE_UNCHANGED);
	Mat image = imread("cs8w.jpg", CV_LOAD_IMAGE_GRAYSCALE);
	Mat kernel = getStructuringElement(MORPH_RECT, Size(3, 3));
	int iterate = 2;
	double dist = 0;
	closing(image, kernel);
	multiErode(image, kernel, iterate);
	medianBlur(image, image, 11);
	multiDilate(image, kernel, iterate);
	threshold(image, image, 50, 255, THRESH_TRIANGLE);
	getFetusImage(image, Point(170,170));
	getLinePoint(image);
	cvLine(image_src, Point(x_1, y_1), Point(x_2, y_2), Scalar(0, 255, 0), 4, 8);
	namedWindow("hasil", WINDOW_AUTOSIZE);
	cvShowImage("hasil", image_src);
	int dx = x_1 - x_2;
	int dy = y_1 - y_2;
	dist = dx*dx + dy*dy;
	cout << "dist^2 = " << dist << endl;
	cout << "Length of fetus : " << getLength(sqrt(dist)) << " cm."<< endl;
	cout << "Coordinate 1 : " << x_1 << " " << y_1 << endl;
	cout << "Coordinate 2 : " << x_2 << " " << y_2 << endl;
	waitKey(0);
	image.release();
	kernel.release();
	cvReleaseImage(&image_src);
	cvDestroyWindow("hasil");
	return 0;
}